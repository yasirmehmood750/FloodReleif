{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7eedabaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:53:12.513093Z",
     "iopub.status.busy": "2024-05-28T05:53:12.512725Z",
     "iopub.status.idle": "2024-05-28T05:53:14.950472Z",
     "shell.execute_reply": "2024-05-28T05:53:14.949230Z"
    },
    "papermill": {
     "duration": 2.446941,
     "end_time": "2024-05-28T05:53:14.953494",
     "exception": false,
     "start_time": "2024-05-28T05:53:12.506553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neural_network import MLPRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fcfd552f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:53:14.962816Z",
     "iopub.status.busy": "2024-05-28T05:53:14.962248Z",
     "iopub.status.idle": "2024-05-28T05:53:17.621825Z",
     "shell.execute_reply": "2024-05-28T05:53:17.620485Z"
    },
    "papermill": {
     "duration": 2.666927,
     "end_time": "2024-05-28T05:53:17.624535",
     "exception": false,
     "start_time": "2024-05-28T05:53:14.957608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# importing CSV with training data\n",
    "file_path = '/kaggle/input/playground-series-s4e5/train.csv'\n",
    "    # Read the CSV file into a DataFrame\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "X=df.copy()\n",
    "\n",
    "X.drop(columns=['FloodProbability'],inplace=True)\n",
    "\n",
    "y=df[['FloodProbability']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9dd0e581",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:53:17.633679Z",
     "iopub.status.busy": "2024-05-28T05:53:17.633258Z",
     "iopub.status.idle": "2024-05-28T05:53:18.291670Z",
     "shell.execute_reply": "2024-05-28T05:53:18.290180Z"
    },
    "papermill": {
     "duration": 0.666429,
     "end_time": "2024-05-28T05:53:18.294732",
     "exception": false,
     "start_time": "2024-05-28T05:53:17.628303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#splitting the data into training data and test data ( aorund 20% of data will be used for testing the results whereas 80% for training the model)\n",
    "\n",
    "#X_train contains training data\n",
    "# y_train cotains result set for training data  ( both X_train and y_train will train the model)\n",
    "# X_test contains the test data\n",
    "# y_test contains test expected Results\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "X_train_original=X_train\n",
    "X_test_original=X_test\n",
    "y_train_original=y_train\n",
    "y_test_original=y_test\n",
    "\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc710362",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:53:18.304354Z",
     "iopub.status.busy": "2024-05-28T05:53:18.303982Z",
     "iopub.status.idle": "2024-05-28T05:53:18.309438Z",
     "shell.execute_reply": "2024-05-28T05:53:18.308164Z"
    },
    "papermill": {
     "duration": 0.013046,
     "end_time": "2024-05-28T05:53:18.311684",
     "exception": false,
     "start_time": "2024-05-28T05:53:18.298638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = MLPRegressor(hidden_layer_sizes=(100, 100), activation='relu', solver='adam', max_iter=500, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4532dae2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:53:18.321167Z",
     "iopub.status.busy": "2024-05-28T05:53:18.320720Z",
     "iopub.status.idle": "2024-05-28T05:58:43.352494Z",
     "shell.execute_reply": "2024-05-28T05:58:43.351290Z"
    },
    "papermill": {
     "duration": 325.048754,
     "end_time": "2024-05-28T05:58:43.364327",
     "exception": false,
     "start_time": "2024-05-28T05:53:18.315573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=500, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPRegressor</label><div class=\"sk-toggleable__content\"><pre>MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=500, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=500, random_state=42)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reshape y_train to a 1D array\n",
    "y_train = np.ravel(y_train)\n",
    "\n",
    "#training the model\n",
    "model.fit(X_train,y_train)\n",
    "\n",
    "\n",
    "# Train the Neural Network model\n",
    "#model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b9cc3f88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:58:43.384859Z",
     "iopub.status.busy": "2024-05-28T05:58:43.384043Z",
     "iopub.status.idle": "2024-05-28T05:58:46.473539Z",
     "shell.execute_reply": "2024-05-28T05:58:46.471840Z"
    },
    "papermill": {
     "duration": 3.105464,
     "end_time": "2024-05-28T05:58:46.478575",
     "exception": false,
     "start_time": "2024-05-28T05:58:43.373111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.015108881318697672\n",
      "Mean Squared Error (MSE): 0.0003604075554587166\n",
      "Root Mean Squared Error (RMSE): 0.018984402952390064\n",
      "R-squared (R²) Score: 0.8613430885900687\n"
     ]
    }
   ],
   "source": [
    "# Predicting the values on the basis of sample\n",
    "prediction=model.predict(X_test)\n",
    "\n",
    "\n",
    "mae = mean_absolute_error(y_test, prediction)\n",
    "mse = mean_squared_error(y_test, prediction)\n",
    "rmse = mean_squared_error(y_test, prediction, squared=False)  # Compute RMSE from MSE\n",
    "r2 = r2_score(y_test, prediction)\n",
    "\n",
    "print(\"Mean Absolute Error (MAE):\", mae)\n",
    "print(\"Mean Squared Error (MSE):\", mse)\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "print(\"R-squared (R²) Score:\", r2)\n",
    "\n",
    "\n",
    "# Evaluate the performance of the classifier ( this is used to identify the Accuracy of Classification Model)\n",
    "#accuracy = accuracy_score(y_test, prediction)\n",
    "#print(\"Accuracy:\", accuracy)\n",
    "\n",
    "\n",
    "\n",
    "# Mean Absolute Error (MAE): 0.01583093808988759\n",
    "# Mean Squared Error (MSE): 0.00040186552736870556\n",
    "# Root Mean Squared Error (RMSE): 0.020046583932648115\n",
    "# R-squared (R²) Score: 0.8457744976398425\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d55275e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:58:46.499635Z",
     "iopub.status.busy": "2024-05-28T05:58:46.499002Z",
     "iopub.status.idle": "2024-05-28T05:59:11.217312Z",
     "shell.execute_reply": "2024-05-28T05:59:11.216054Z"
    },
    "papermill": {
     "duration": 24.732516,
     "end_time": "2024-05-28T05:59:11.220825",
     "exception": false,
     "start_time": "2024-05-28T05:58:46.488309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Getting Column Names from Original Input dataframe and extractingn the same columns from polynomial array \n",
    "\n",
    "# Get feature names for the polynomial features\n",
    "feature_names = X_test_original.columns\n",
    "\n",
    "# Create a DataFrame for polynomial features to easily identify the original features\n",
    "input_df = pd.DataFrame(X_test, columns=feature_names)\n",
    "\n",
    "# Create a DataFrame for output data ( this dataframe will further be concatenated with Prediction so that accurace of the model could be gauged)\n",
    "output_df = pd.DataFrame(y_test, columns=['FloodProbability'])  # Replace with appropriate column name\n",
    "output_df.rename(columns={'FloodProbability': 'FloodProbability_test'}, inplace=True)\n",
    "\n",
    "# Create a DataFrame for prediction results\n",
    "prediction_df = pd.DataFrame(prediction, columns=['FloodProbability_Predicted'])  # Assuming prediction is a 1D array\n",
    "\n",
    "\n",
    "\n",
    "#writing output in CSV for further asessment \n",
    "\n",
    "input_df.to_csv('/kaggle/working/input_FloodPrediction_MLPRegressor.csv', index=False)\n",
    "output_df.to_csv('/kaggle/working/output_FloodPrediction_MLPRegressor.csv', index=False)\n",
    "prediction_df.to_csv('/kaggle/working/FloodPrediction_MLPRegressor.csv', index=False)\n",
    "\n",
    "\n",
    "\n",
    "df_input_csv= pd.read_csv('/kaggle/working/input_FloodPrediction_MLPRegressor.csv')\n",
    "df_output_csv= pd.read_csv('/kaggle/working/output_FloodPrediction_MLPRegressor.csv')\n",
    "df_prediction_csv= pd.read_csv('/kaggle/working/FloodPrediction_MLPRegressor.csv')\n",
    "\n",
    "\n",
    "\n",
    "# Concatenate input, output, and prediction DataFrames along the columns axis\n",
    "combined_df = pd.concat([df_input_csv, df_output_csv,df_prediction_csv], axis=1)\n",
    "\n",
    "\n",
    "\n",
    "combined_df.to_csv('/kaggle/working/FloodPrediction_final_MLPRegressor.csv', index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b1fd0b02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T05:59:11.231859Z",
     "iopub.status.busy": "2024-05-28T05:59:11.231426Z",
     "iopub.status.idle": "2024-05-28T05:59:42.348746Z",
     "shell.execute_reply": "2024-05-28T05:59:42.347463Z"
    },
    "papermill": {
     "duration": 31.126028,
     "end_time": "2024-05-28T05:59:42.351683",
     "exception": false,
     "start_time": "2024-05-28T05:59:11.225655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:432: UserWarning: X has feature names, but MLPRegressor was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "#producing Results for Submission to Kagal on Kagal provided files\n",
    "\n",
    "# importing CSV with training data\n",
    "file_path = '/kaggle/input/playground-series-s4e5/test.csv'\n",
    "\n",
    "df22=pd.read_csv(file_path)\n",
    "\n",
    "df22.to_csv('/kaggle/working/Data_before_prediction_MLPRegressor.csv', index=False)\n",
    "\n",
    "#defining input and output dataframes\n",
    "Xa=df22.copy()\n",
    "\n",
    "\n",
    "#predicting results\n",
    "prediction_submission=model.predict(Xa)\n",
    "\n",
    "# Create a DataFrame for prediction results\n",
    "prediction_df_final = pd.DataFrame(prediction_submission, columns=['FloodProbability'])  # Assuming prediction is a 1D array\n",
    "\n",
    "prediction_df_final.to_csv('/kaggle/working/output_df_results_MLPRegressor.csv', index=False)\n",
    "\n",
    "\n",
    "# Create a DataFrame for input data\n",
    "\n",
    "# Get feature names for the polynomial features\n",
    "feature_names = Xa.columns\n",
    "\n",
    "# Create a DataFrame for polynomial features to easily identify the original features\n",
    "input_df = pd.DataFrame(Xa, columns=feature_names)\n",
    "\n",
    "\n",
    "#input_df = pd.DataFrame(Xa, columns=Xa.columns.tolist())  # Replace with appropriate column names\n",
    "\n",
    "input_df.to_csv('/kaggle/working/input_df_results_MLPRegressor.csv', index=False)\n",
    "\n",
    "\n",
    "df_input_csv_fin= pd.read_csv('/kaggle/working/input_df_results_MLPRegressor.csv')\n",
    "df_output_csv_fin= pd.read_csv('/kaggle/working/output_df_results_MLPRegressor.csv')\n",
    "\n",
    "df_input_csv_fin=df_input_csv_fin[['id']]\n",
    "# Concatenate input, output, and prediction DataFrames along the columns axis\n",
    "combined_df_fin = pd.concat([df_input_csv_fin, df_output_csv_fin], axis=1)\n",
    "\n",
    "\n",
    "combined_df_fin.to_csv('/kaggle/working/combined_df_fin_MLPRegressor.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1dc016c7",
   "metadata": {
    "papermill": {
     "duration": 0.004335,
     "end_time": "2024-05-28T05:59:42.360827",
     "exception": false,
     "start_time": "2024-05-28T05:59:42.356492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8121328,
     "sourceId": 73278,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 393.586495,
   "end_time": "2024-05-28T05:59:42.988274",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-28T05:53:09.401779",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
