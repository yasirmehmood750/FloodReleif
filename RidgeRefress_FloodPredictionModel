{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8511546,"sourceType":"datasetVersion","datasetId":5080885}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/yasirmehmood2/ridgeregress-floodprediction?scriptVersionId=179643519\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-25T05:37:18.16508Z","iopub.execute_input":"2024-05-25T05:37:18.166204Z","iopub.status.idle":"2024-05-25T05:37:20.913326Z","shell.execute_reply.started":"2024-05-25T05:37:18.166166Z","shell.execute_reply":"2024-05-25T05:37:20.911863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# importing CSV with training data\nfile_path = '/kaggle/input/flood-regression-dataset/train.csv'\n    # Read the CSV file into a DataFrame\ndf = pd.read_csv(file_path)\n\nX=df.copy()\n\nX.drop(columns=['FloodProbability'],inplace=True)\n\ny=df[['FloodProbability']]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#splitting the data into training data and test data ( aorund 20% of data will be used for testing the results whereas 80% for training the model)\n\n#X_train contains training data\n# y_train cotains result set for training data  ( both X_train and y_train will train the model)\n# X_test contains the test data\n# y_test contains test expected Results\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nX_train_original=X_train\nX_test_original=X_test\ny_train_original=y_train\ny_test_original=y_test","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_original","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Shape of X_train:\", X_train.shape)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import Ridge\n\nmodel =Ridge(alpha=1.0, fit_intercept=True, copy_X=True, max_iter=None, tol=0.001, solver='auto', random_state=None)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('going to train model')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Reshape y_train to a 1D array\ny_train = np.ravel(y_train)\n\n#training the model\n\nmodel.fit(X_train,y_train)\n\n\n# Train the Neural Network model\n#model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Predicting the values on the basis of sample\nprediction=model.predict(X_test)\n\n# Calculate evaluation metrics\nmae = mean_absolute_error(y_test, prediction)\nmse = mean_squared_error(y_test, prediction)\nrmse = mse ** 0.5\nr2 = r2_score(y_test, prediction)\n\n# Print the evaluation metrics\nprint(f\"Mean Absolute Error (MAE): {mae}\")\nprint(f\"Mean Squared Error (MSE): {mse}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse}\")\nprint(f\"R-squared (R²) Score: {r2}\")\n\n\n\n# Evaluate the performance of the classifier ( this is used to identify the Accuracy of Classification Model)\n#accuracy = accuracy_score(y_test, prediction)\n#print(\"Accuracy:\", accuracy)\n\n\n\n# Mean Absolute Error (MAE): 0.01583093808988759\n# Mean Squared Error (MSE): 0.00040186552736870556\n# Root Mean Squared Error (RMSE): 0.020046583932648115\n# R-squared (R²) Score: 0.8457744976398425\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Getting Column Names from Original Input dataframe and extractingn the same columns from polynomial array \n\n# Get feature names for the polynomial features\nfeature_names = X_test_original.columns\n\n# Create a DataFrame for polynomial features to easily identify the original features\ninput_df = pd.DataFrame(X_test, columns=feature_names)\n\n# Create a DataFrame for output data ( this dataframe will further be concatenated with Prediction so that accurace of the model could be gauged)\noutput_df = pd.DataFrame(y_test, columns=['FloodProbability'])  # Replace with appropriate column name\noutput_df.rename(columns={'FloodProbability': 'FloodProbability_test'}, inplace=True)\n\n# Create a DataFrame for prediction results\nprediction_df = pd.DataFrame(prediction, columns=['FloodProbability_Predicted'])  # Assuming prediction is a 1D array\n\n\n\n#writing output in CSV for further asessment \n\ninput_df.to_csv('/kaggle/working/input_FloodPrediction_Ridge.csv', index=False)\noutput_df.to_csv('/kaggle/working/output_FloodPrediction_Ridge.csv', index=False)\nprediction_df.to_csv('/kaggle/working/FloodPrediction_Ridge.csv', index=False)\n\n\n\ndf_input_csv= pd.read_csv('/kaggle/working/input_FloodPrediction_Ridge.csv')\ndf_output_csv= pd.read_csv('/kaggle/working/output_FloodPrediction_Ridge.csv')\ndf_prediction_csv= pd.read_csv('/kaggle/working/FloodPrediction_Ridge.csv')\n\n\n\n# Concatenate input, output, and prediction DataFrames along the columns axis\ncombined_df = pd.concat([df_input_csv, df_output_csv,df_prediction_csv], axis=1)\n\n\n\ncombined_df.to_csv('/kaggle/working/FloodPrediction_final_Ridge.csv', index=False)\n\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#producing Results for Submission to Kagal on Kagal provided files\n\n# importing CSV with training data\nfile_path = '/kaggle/input/flood-regression-dataset/test.csv'\n\ndf22=pd.read_csv(file_path)\n\ndf22.to_csv('/kaggle/working/Data_before_prediction_Ridge.csv', index=False)\n\n#defining input and output dataframes\nXa=df22.copy()\n\n\n#predicting results\nprediction_submission=model.predict(Xa)\n\n# Create a DataFrame for prediction results\nprediction_df_final = pd.DataFrame(prediction_submission, columns=['FloodProbability'])  # Assuming prediction is a 1D array\n\nprediction_df_final.to_csv('/kaggle/working/output_df_results_Ridge.csv', index=False)\n\n\n# Create a DataFrame for input data\n\n# Get feature names for the polynomial features\nfeature_names = Xa.columns\n\n# Create a DataFrame for polynomial features to easily identify the original features\ninput_df = pd.DataFrame(Xa, columns=feature_names)\n\n\n#input_df = pd.DataFrame(Xa, columns=Xa.columns.tolist())  # Replace with appropriate column names\n\ninput_df.to_csv('/kaggle/working/input_df_results_Ridge.csv', index=False)\n\n\ndf_input_csv_fin= pd.read_csv('/kaggle/working/input_df_results_Ridge.csv')\ndf_output_csv_fin= pd.read_csv('/kaggle/working/output_df_results_Ridge.csv')\n\ndf_input_csv_fin=df_input_csv_fin[['id']]\n# Concatenate input, output, and prediction DataFrames along the columns axis\ncombined_df_fin = pd.concat([df_input_csv_fin, df_output_csv_fin], axis=1)\n\n\ncombined_df_fin.to_csv('/kaggle/working/combined_df_fin_Ridge.csv', index=False)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}